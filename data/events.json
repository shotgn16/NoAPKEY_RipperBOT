[null,{"name":"WrexMusicFix","temp":"","event-type":"1","_id":"wLJvt","desc":"Put this above all other events in the list.  This is a testing fix, please report if it worked for you or not to General Wrex.","actions":[{"code":"Audio.playYt = function(url, options, id) {\n\tif(!this.ytdl) return false;\n\tconst stream = this.ytdl(url, {\n\t\tquality: 'highestaudio',\n\t\thighWaterMark: 1024 * 1024 * 25 // 25 megabytes\n\t});\n\n\toptions.highWaterMark = 1;\n\n\tthis.dispatchers[id] = this.connections[id].playStream(stream, options);\n\treturn true;\n};","behavior":"0","interpretation":"0","storage":"0","varName":"","VTypeSelect":"0","CVTypeValue":"","name":"Run Script"}]},{"name":"LevelingSystem","temp":"msg","event-type":"0","actions":[{"message":"1","varName":"msg","info":"3","storage":"1","varName2":"member","name":"Store Message Info"},{"member":"2","varName":"member","dataName":"exp","changeType":"1","value":"1","name":"Control Member Data"},{"member":"2","varName":"member","dataName":"level","defaultVal":"1","storage":"1","varName2":"cookie.Level","name":"Store Member Data"},{"member":"2","varName":"member","dataName":"exp","comparison":"1","value":"${tempVars(\"cookie.Level\") * 5}","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Member Data"},{"member":"2","varName":"member","dataName":"exp","changeType":"0","value":"0","name":"Control Member Data"},{"member":"2","varName":"member","dataName":"level","changeType":"1","value":"1","name":"Control Member Data"},{"message":"1","varName":"msg","info":"4","storage":"1","varName2":"channel","name":"Store Message Info"},{"member":"2","varName":"member","dataName":"level","defaultVal":"1","storage":"1","varName2":"cookie.Level","name":"Store Member Data"},{"channel":"4","varName":"","message":"${tempVars(\"member\")} reached level ${tempVars(\"cookie.Level\")}!","storage":"0","varName2":"","iffalse":"0","iffalseVal":"","name":"Send Message"}],"_id":"weTYz"},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"zeWwk","actions":[]},{"name":"autorole","temp":"member","event-type":"6","_id":"pQXlM","actions":[{"server":"0","varName":"","dataName":"autorole","comparison":"1","value":"1","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Server Data"},{"member":"2","varName2":"member","role":"4","varName":"Autorole.Role","name":"Add Member Role"}]},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"GkSQU","actions":[]},{"name":"JoinMSG","temp":"","event-type":"4","_id":"mXrld","actions":[{"channel":"4","varName":"","message":"Hello, I'm RipperBot, thank you for inviting me!\nBefore we get started there are a few things i must make you aware of.\n - My Default prefix is `!`. Currently you are unable to change it, howerver that is to change sometime soon.\n - I am currently still in development so some of my features may not function 100% as intended.\n - My help command is `!help` and i do not care where you put capitol letters in your commands. I will still read them. :)\n\nHave Fun!\n\n*Any issues, Contact* \nShotgn15#6747","storage":"0","varName2":"","name":"Send Message"}]},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"wKukg","actions":[]},{"name":"Bot Status","temp":"5","event-type":"3","_id":"lTBMf","actions":[{"info":"3","storage":"1","varName2":"Total.Guilds","name":"Store Bot Client Info"},{"activity":"0","nameText":"!Help","url":"","stat":"0","name":"Set Bot Activity"}]},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"uLuZM","actions":[]},{"name":"v-channel-deleted","temp":"channeldeleted","event-type":"15","_id":"XQYqW","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channeldeleted = tempVars('channeldeleted');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.v-channel-deleted`);\n    if (log_system === \"enabled\") {\n        embed.setTitle('Voice Channel Deleted');\n        embed.setColor('RED');\n        embed.addField('Name', channeldeleted.name, true);\n        embed.addField('Category', (channeldeleted.parent && channeldeleted.parent.name) ? channeldeleted.parent.name : \"None\", true);\n        embed.addField('User Limit', channeldeleted.userLimit, true);\n        embed.setFooter(`ID: ${channeldeleted.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.v_channel_deleted`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"v-channel-created","temp":"channelcreated","event-type":"14","_id":"YOeFC","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channelcreated = tempVars('channelcreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.v-channel-created`);\n    if (log_system === \"enabled\") {\n        embed.setTitle('Voice Channel Created');\n        embed.setColor('#20fc3a');\n        embed.addField('Name', channelcreated.name, true);\n        embed.addField('Category', (channelcreated.parent && channelcreated.parent.name) ? channelcreated.parent.name : \"None\", true);\n        embed.addField('User Limit', channelcreated.userLimit, true);\n        embed.setFooter(`ID: ${channelcreated.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.v_channel_created`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"role-updated","temp":"rolebefore","event-type":"25","_id":"BDQWN","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst rolebefore = tempVars('rolebefore');\nconst roleafter = tempVars(\"roleafter\");\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.role-updated`);\n    if (log_system === \"enabled\") {\n        if (roleafter.id != server.id) {\n            if (rolebefore.name != roleafter.name || rolebefore.hexColor != roleafter.hexColor) {\n                embed.setTitle(`Role \"${rolebefore.name}\" Updated`);\n                embed.setColor(roleafter.hexColor);\n                embed.addField('Name', (rolebefore.name == roleafter.name) ? `Updated: :x:` : `Updated: ✅ \\n New Name: ${roleafter.name}`, true);\n                embed.addField('Color', (rolebefore.hexColor == roleafter.hexColor) ? 'Updated: :x:' : `Updated: ✅ \\n New Color: ${roleafter.hexColor}`, true);\n                embed.setFooter(`ID: ${roleafter.id}`);\n                embed.setTimestamp();\n                server.channels.get(log_chan).send(embed);\n                db.add(`${server.id}logs.role_updated`, 1);\n                db.add(`${server.id}logs.all`, 1);\n            }\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"temp2":"roleafter","restriction":"0"},{"name":"role-deleted","temp":"roledeleted","event-type":"11","_id":"VDYKZ","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst roledeleted = tempVars('roledeleted');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.role-deleted`);\n    if (log_system === \"enabled\") {\n            embed.setTitle('Role Deleted');\n            embed.setColor(roledeleted.hexColor);\n            embed.addField('Name', roledeleted.name, true);\n            embed.addField('Managed', roledeleted.managed, true);\n            embed.addField('Position', roledeleted.position, true);\n            embed.setFooter(`ID: ${roledeleted.id}`);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.role_deleted`, 1);\n            db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"role-created","temp":"rolecreated","event-type":"10","_id":"ChohJ","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst rolecreated = tempVars('rolecreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.role-created`);\n    if (log_system === \"enabled\") {\n            embed.setTitle('Role Created');\n            embed.setColor('#20fc3a');\n            embed.addField('Name', rolecreated, true);\n            embed.addField('Managed', rolecreated.managed, true);\n            embed.addField('Position', rolecreated.position, true);\n            embed.setFooter(`ID: ${rolecreated.id}`);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.role_created`, 1);\n            db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"message-edited","temp":"msg1","event-type":"26","_id":"voIMM","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst msg1 = tempVars('msg1');\nconst msg2 = tempVars(\"msg2\");\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.message-edited`);\n    if (log_system === \"enabled\") {\n        if (msg1.author.bot == false) {\n            embed.setTitle('Message Edited');\n            embed.setURL(msg2.url);\n            embed.setAuthor(msg1.author.tag, msg1.author.displayAvatarURL);\n            embed.setColor('#EE82EE');\n            embed.setThumbnail(msg1.author.displayAvatarURL);\n            embed.addField('Original Message', (msg1.content.length <= 1024) ? msg1.content : `${msg1.content.substring(0, 1020)}...`, true);\n            embed.addField('Edited Message', (msg2.content.length <= 1024) ? msg2.content : `${msg2.content.substring(0, 1020)}...`, true);\n            embed.addField('Channel', msg1.channel, true);\n            embed.addField('Message Author', `${msg1.author} (${msg1.author.tag})`, true);\n            embed.addField('Number of Edits', msg2.edits.length, true);\n            (msg2.mentions.users.size === 0) ? embed.addField('Mentioned Users', 'None', true): embed.addField('Mentioned Users', `Mentioned Member Count: ${msg2.mentions.users.array().length} \\n Mentioned Users List: \\n ${msg2.mentions.users.array()}`, true);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.message_edited`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"temp2":"msg2","restriction":"0"},{"name":"message-deleted","temp":"msgdel","event-type":"18","_id":"XpYuO","actions":[{"behavior":"1","interpretation":"1","code":"if (me.permissions.has('VIEW_AUDIT_LOG')) {\n    server.fetchAuditLogs()\n        .then(audit => {\n            this.storeValue(audit.entries.first()\n                .executor, 1, \"delby\", cache);\n            Actions.callNextAction(cache);\n        })\n        .catch(console.error);\n} else {\n    Actions.callNextAction(cache);\n}","storage":"0","varName":"","name":"Run Script"},{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst msgdel = tempVars('msgdel');\nconst delby = tempVars(\"delby\");\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.message-deleted`);\n    if (log_system === \"enabled\") {\n        if (msgdel.author.bot == false) {\n            embed.setTitle('Message Deleted');\n            embed.setURL(msgdel.url);\n            embed.setAuthor(msgdel.author.tag, msgdel.author.displayAvatarURL);\n            embed.setThumbnail(msgdel.author.displayAvatarURL);\n            embed.addField('Deleted Text', (msgdel.content.length <= 1024) ? msgdel.content : `${msgdel.content.substring(0, 1020)}...`, true);\n            embed.addField('Channel', msgdel.channel, true);\n            embed.addField('Message Author', `${msgdel.author} (${msgdel.author.tag})`, true);\n            (delby) ? (msgdel.author !== delby) ? embed.addField('Deleted By', delby, true): '' : '';\n            (msgdel.mentions.users.size === 0) ? embed.addField('Mentioned Users', 'None', true): embed.addField('Mentioned Users', `Mentioned Member Count: ${msgdel.mentions.users.array().length} \\n Mentioned Users List: \\n ${msgdel.mentions.users.array()}`, true);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.message_deleted`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"member-leave","temp":"memberleave","event-type":"7","_id":"sJMAW","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst memberleave = tempVars('memberleave');\nlet embed = new DiscordJS.RichEmbed();\n\n(async () => {\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.member-leave`);\n    if (log_system === \"enabled\") {\n        const memS = await server.fetchMembers();\n        embed.setTitle('Member Left');\n        embed.setColor('#3dd0f4');\n        embed.setAuthor(memberleave.user.tag, memberleave.user.displayAvatarURL);\n        embed.setThumbnail(memberleave.user.displayAvatarURL);\n        embed.addField('User', memberleave, true);\n        embed.addField('Member Count', server.members.size, true);\n        embed.setFooter(`ID: ${memberleave.user.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan)\n            .send(embed);\n        db.add(`${server.id}logs.member_leave`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}\n})();","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"member-join","temp":"memberjoin","event-type":"6","_id":"WFmNF","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst memberjoin = tempVars('memberjoin');\nlet embed = new DiscordJS.RichEmbed();\n\n(async () => {\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.member-join`);\n    if (log_system === \"enabled\") {\n        const memS = await server.fetchMembers();\n        embed.setTitle('Member Joined');\n        embed.setColor('#3dd0f4');\n        embed.setAuthor(memberjoin.user.tag, memberjoin.user.displayAvatarURL);\n        embed.setThumbnail(memberjoin.user.displayAvatarURL);\n        embed.addField('User', memberjoin, true);\n        embed.addField('Member Count', server.members.size, true);\n        embed.setFooter(`ID: ${memberjoin.user.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.member_joined`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}\n})();","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"emoji-created","temp":"emojicreated","event-type":"16","_id":"NsZuU","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst emojicreated = tempVars('emojicreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.emoji-created`);\n    if (log_system === \"enabled\") {\n        embed.setTitle('Emoji Created');\n        embed.setColor('#20fc3a');\n        embed.setThumbnail(emojicreated.url);\n        embed.addField('Name', emojicreated.name, true);\n        embed.addField('Identifier', emojicreated.identifier, true);\n        embed.addField('Is Animated?', emojicreated.animated, true);\n        embed.setFooter(`ID: ${emojicreated.id}`);\n        embed.setTimestamp();\n        server.channels.get(log_chan).send(embed);\n        db.add(`${server.id}logs.emoji_created`, 1);\n        db.add(`${server.id}logs.all`, 1);\n    }\n}","storage":"0","varName":"","name":"Run Script"}]},{"name":"channel-updated","temp":"channelbefore","event-type":"23","_id":"vXtCx","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channelbefore = tempVars('channelbefore');\nconst channelafter = tempVars('channelafter');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.channel-updated`);\n    if (log_system === \"enabled\") {\n        if (!channelbefore.name.startsWith(\"ticket-\")) {\n            if (channelbefore != channelafter) {\n                embed.setTitle(`Channl ${channelbefore.name} Updated`);\n                embed.setColor('#20fc3a');\n                embed.addField('Name', (channelbefore.name == channelafter.name) ? \"Updated: ❌\" : `Updated: ✅ \\n New Name: ${channelafter.name}`, true);\n                embed.addField('Topic', (channelbefore.topic == channelafter.topic) ? \"Updated: ❌\" : `Updated: ✅ \\n New Topic: ${channelafter.topic}`, true);\n                embed.addField('Is NSFW?', (channelafter.nsfw) ? \"✅\" : \"❌\", true);\n                embed.addField('Category', (channelafter.parent && channelbefore.parent.name == channelafter.parent.name) ? \"Updated: ❌\" : `Updated: ✅ \\n New Category: ${channelafter.parent.name}`, true);\n                embed.addField('Position', (channelbefore.position == channelafter.position) ? \"Updated: ❌\" : `Updated:  ✅ \\n New Position: ${channelafter.position}`, true);\n                embed.setFooter(`ID: ${channelafter.id}`);\n                embed.setTimestamp();\n                server.channels.get(log_chan).send(embed);\n                db.add(`${server.id}logs.channel_updated`, 1);\n                db.add(`${server.id}logs.all`, 1);\n            }\n        }\n    }\n}","storage":"0","varName":"","name":"Run Script"}],"temp2":"channelafter","restriction":"0"},{"name":"channel-deleted","temp":"channeldeleted","event-type":"9","_id":"LVnFA","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channeldeleted = tempVars('channeldeleted');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.channel-deleted`);\n    if (log_system === \"enabled\") {\n        if (!channeldeleted.name.startsWith(\"ticket-\")) {\n            embed.setTitle('Channel Deleted');\n            embed.setColor('RED');\n            embed.setTimestamp();\n            embed.addField('Name', channeldeleted.name, true);\n            embed.addField('Category', (channeldeleted.parent && channeldeleted.parent.anem) ? channeldeleted.parent.name : \"None\", true);\n            embed.setFooter(`ID: ${channeldeleted.id}`);\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.channel_deleted`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}\n","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"channel-created","temp":"channelcreated","event-type":"8","_id":"AAVpZ","actions":[{"behavior":"1","interpretation":"1","code":"const wm = this.getWrexMods();\nconst fs = wm.require(\"fs\");\nconst nodegyp = wm.require('node-gyp');\nconst db = wm.require('quick.db');\nconst path = `./resources/database/${server.id}/log_chan.txt`;\nconst channelcreated = tempVars('channelcreated');\nlet embed = new DiscordJS.RichEmbed();\n\nif (fs.existsSync(path)) {\n    const log_chan = fs.readFileSync(path, 'utf8');\n    const log_system = db.get(`${server.id}log_system.channel-created`);\n    if (log_system === \"enabled\") {\n        if (!channelcreated.name.startsWith(\"ticket-\")) {\n            embed.setTitle('Channel Created');\n            embed.setColor('#20fc3a');\n            embed.addField('Name', channelcreated, true);\n            embed.addField('Category', (channelcreated.parent && channelcreated.parent.name) ? channelcreated.parent.name : \"None\", true);\n            embed.setFooter(`ID: ${channelcreated.id}`);\n            embed.setTimestamp();\n            server.channels.get(log_chan).send(embed);\n            db.add(`${server.id}logs.channel_created`, 1);\n            db.add(`${server.id}logs.all`, 1);\n        }\n    }\n}\n","storage":"0","varName":"","name":"Run Script"}]},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"GoHZM","actions":[]},{"name":"reactionStart","temp":"","event-type":"1","_id":"Lwriz","actions":[{"storage":"3","varName":"reactionRoleInf","changeType":"0","value":"[]","name":"Control Variable"},{"behavior":"0","interpretation":"1","code":"const _this = this;\nconst fs = require('fs');\nvar someArray = [];\nvar someNum = 0;\nvar globalData;\nvar interval;\n\nfs.readFile('./data/globalVars.json', function read(err, data) {\n    if (err) {\n        throw err;\n    }\n    var savedVars = JSON.parse(data);\n    \n    if (savedVars.hasOwnProperty('tempData')) {\n        var newThing = savedVars.tempData.replace(/[\\\\]/g,'');\n        try {\n            _this.storeValue(JSON.parse(newThing), 3, 'reactionRoleInf', cache);\n            console.log('Saved reactionRoleInf');\n        } catch (e) {\n            console.log('Invalid JSON - Saved Vars')\n        }\n    }\n\n    if(fs.existsSync('./resources/serverRoleMenu.json')) {\n        fs.readFile('./resources/serverRoleMenu.json', async function read(err, data) {\n            if (err) {\n                throw err;\n            }\n            var DataToLoop = JSON.parse(data);\n            globalData = DataToLoop;\n            for (var key in DataToLoop) {\n                if (DataToLoop.hasOwnProperty(key)) {\n                    await someArray.push(DataToLoop[key]);\n                }\n            }\n            interval = setInterval(fetchMessages, 2000);\n        })\n\n    } else {\n        fs.writeFile(\"./resources/serverRoleMenu.json\", \"{}\", function(err) {\n            if(err) {\n                return console.log(err);\n            }\n        });\n    }\n});\n\nfunction fetchMessages() {\n if (someNum != someArray.length) {\n     var channelToFetch = client.channels.get(someArray[someNum]);\n     if (channelToFetch != null) {\n        channelToFetch.fetchMessages({ limit: 100 });\n        console.log(`Fetched messages in channel id ${someArray[someNum]}`);\n        someNum = someNum + 1;\n     } else {\n        delete globalData[someArray[someNum]];\n        fs.writeFile(\"./resources/serverRoleMenu.json\", JSON.stringify(globalData), function(err) {\n            if(err) {\n                return console.log(err);\n            }\n        }); \n     }\n } else {\n    console.log('Finished fetching messages from all logged servers.')\n    clearInterval(interval);\n }\n}","storage":"0","varName":"","name":"Run Script"}]},{"name":"reactionRev","temp":"msgReaction","event-type":"29","_id":"ZQmhC","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nconst rectarray = globalVars('reactionRoleInf');\nvar usrWhoReacted = reaction.users.array();\nconst _this = this;\nvar messageSent = 'Successfully removed the role {roleName} in {server}'; \n// The only variables that work rn, {rolename} and {server}\nvar actualUser;\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\n\nasync function checkRoles() {\n\tfor (i = 0; i < rectarray.length; i++) {\n\t\tif (rectarray[i][msgRct.id] != null) {\n            arrayNum = i;\n\t\t\tif (rectarray[i][msgRct.id][3] != null) {\n\t\t\t\tusrWhoReacted = rectarray[i][msgRct.id][3].filter(val => !usrWhoReacted.includes(val))[0];\n\t\t\t\tif (usrWhoReacted != null) {\n\t\t\t\t\tif (usrWhoReacted.data('cooldownData.reactionMenu') != 1) {\n\t\t\t\t\t\tvar newArr = rectarray[i][msgRct.id];\n\t\t\t\t\t\tfor (io = 0; io < newArr.length; io++) {\n\t\t\t\t\t\t\tif (newArr[io][0] == reaction.emoji.name) {\n\t\t\t\t\t\t\t\tvar newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n\t\t\t\t\t\t\t\tvar checkRole = await msgRct.guild.roles.get(newArr[io][1]);\n\t\t\t\t\t\t\t\tif (checkRole != null) {\n\t\t\t\t\t\t\t\t\tif (!newUsr.roles.has(newArr[io][1])) {\n                                        usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n                                        var tempThing = globalVars('reactionRoleInf');\n\t\t\t\t\t\t\t\t\t    tempThing[i][msgRct.id][3] = await reaction.users.array();\n                                        _this.storeValue(tempThing, 3, 'reactionRoleInf', cache);\n                                        interval = setInterval(resetTimer, 1000);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t} else {\n                                        var tempThing = globalVars('reactionRoleInf');\n                                        usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n\t\t\t\t\t\t\t\t\t\ttempThing[i][msgRct.id][3] = await reaction.users.array();\n\t\t\t\t\t\t\t\t\t\t_this.storeValue(tempThing, 3, 'reactionRoleInf', cache)\n\t\t\t\t\t\t\t\t\t\tnewUsr.removeRole(newArr[io][1]);\n\t\t\t\t\t\t\t\t\t\tif (dmUserAfter) {\n\t\t\t\t\t\t\t\t\t\t\tmessageSent = messageSent.replace(/{roleName}/g, newArr[io][2]);\n                                            messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n\t\t\t\t\t\t\t\t\t\t    newUsr.send(messageSent);\n                                        }\n                                        interval = setInterval(resetTimer, 1000);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n                                    var newArray = rectarray.filter(someItem => {\n                                        someItem.hasOwnProperty(msgRct.id) != true\n                                    })\n                                    _this.storeValue(newArray, 3, 'reactionRoleInf', cache);\n                                    _this.storeValue(JSON.stringify(newArray), 3, 'tempData', cache);\n\t\t\t\t\t\t\t\t\tmsgRct.edit({\n\t\t\t\t\t\t\t\t\t\tembed: {\n\t\t\t\t\t\t\t\t\t\t\tcolor: 0xff0000,\n\t\t\t\t\t\t\t\t\t\t\ttitle: \"Role Reaction Menu\",\n\t\t\t\t\t\t\t\t\t\t\tdescription: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n\t\t\t\t\t\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t\t\t\t\t\t}\n                                    });\n                                    _this.callNextAction(cache);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n                        usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunction resetTimer() {\n    usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n    clearInterval(interval);\n}\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"},{"storage":"3","varName":"tempData","name":"Save Variable"}]},{"name":"reactionGet","temp":"msgReaction","event-type":"28","_id":"zimku","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nconst rectarray = globalVars('reactionRoleInf');\nvar usrWhoReacted = reaction.users.last();\nconst _this = this;\nvar messageSent = 'Successfully added the role {roleName} in {server}'; \nvar interval;\nvar arrayNum;\n\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\n\nasync function checkRoles() {\n\tif (usrWhoReacted.id != client.user.id) {\n\t\tif (usrWhoReacted.data('cooldownData.reactionMenu') != 1) {\n\t\t\tfor (i = 0; i < rectarray.length; i++) {\n\t\t\t\tif (rectarray[i][msgRct.id] != null) {\n                    arrayNum = i;\n\t\t\t\t\tvar newArr = rectarray[i][msgRct.id];\n\t\t\t\t\tfor (io = 0; io < newArr.length; io++) {\n\t\t\t\t\t\tif (newArr[io][0] == reaction.emoji.name) {\n\t\t\t\t\t\t\tvar newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n\t\t\t\t\t\t\tvar checkRole = await msgRct.guild.roles.get(newArr[io][1])\n\t\t\t\t\t\t\tif (checkRole != null) {\n\t\t\t\t\t\t\t\tif (newUsr.roles.has(newArr[io][1])) {\n                                    usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n\t\t\t\t\t\t\t\t\tvar tempThing = globalVars('reactionRoleInf');\n\t\t\t\t\t\t\t\t\ttempThing[i][msgRct.id][3] = await reaction.users.array();\n                                    _this.storeValue(tempThing, 3, 'reactionRoleInf', cache)\n                                    interval = setInterval(resetTimer, 1000)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t} else {\n                                    usrWhoReacted.setData('cooldownData.reactionMenu', '1');\n\t\t\t\t\t\t\t\t\tvar tempThing = globalVars('reactionRoleInf');\n\t\t\t\t\t\t\t\t\ttempThing[i][msgRct.id][3] = await reaction.users.array();\n\t\t\t\t\t\t\t\t\t_this.storeValue(tempThing, 3, 'reactionRoleInf', cache)\n\t\t\t\t\t\t\t\t\tnewUsr.addRole(newArr[io][1]);\n\t\t\t\t\t\t\t\t\tif (dmUserAfter) {\n                                        messageSent = messageSent.replace(/{roleName}/g, newArr[io][2]);\n                                        messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n\t\t\t\t\t\t\t\t\t\tnewUsr.send(messageSent);\n                                    }\n                                    interval = setInterval(resetTimer, 1000)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n                                var newArray = rectarray.filter(someItem => {\n                                    someItem.hasOwnProperty(msgRct.id) != true\n                                })\n                                _this.storeValue(newArray, 3, 'reactionRoleInf', cache);\n                                _this.storeValue(JSON.stringify(newArray), 3, 'tempData', cache);\n\t\t\t\t\t\t\t\tmsgRct.edit({\n\t\t\t\t\t\t\t\t\tembed: {\n\t\t\t\t\t\t\t\t\t\tcolor: 0xff0000,\n\t\t\t\t\t\t\t\t\t\ttitle: \"Role Reaction Menu\",\n\t\t\t\t\t\t\t\t\t\tdescription: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n\t\t\t\t\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t\t\t\t\t}\n                                });\n                                _this.callNextAction(cache);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n            usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n        }\n\t}\n\n}\n\nfunction resetTimer() {\n    usrWhoReacted.setData('cooldownData.reactionMenu', '0');\n    clearInterval(interval);\n}\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"},{"storage":"3","varName":"tempData","name":"Save Variable"}]},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"gTlTg","actions":[]},{"name":"On Bot Error","temp":"DBMErr","event-type":"37","_id":"dYqkF","actions":[{"info":"0","find":"627045056167149569","storage":"1","varName":"Support-ServerID","name":"Find Server"},{"info":"0","find":"641248652815368193","storage":"1","varName":"crashlogchan","name":"Find Channel"},{"type":"7","storage":"1","varName":"Date.month","name":"Store Time Info"},{"type":"2","storage":"1","varName":"Date.day","name":"Store Time Info"},{"type":"3","storage":"1","varName":"Date.hour","name":"Store Time Info"},{"type":"4","storage":"1","varName":"Date.min","name":"Store Time Info"},{"type":"5","storage":"1","varName":"Date.sec","name":"Store Time Info"},{"title":"Bot Error","author":"","color":"","timestamp":"false","url":"","authorIcon":"","imageUrl":"","thumbUrl":"","storage":"1","varName":"ErrorMessage","name":"Create Embed Message"},{"storage":"1","varName":"ErrorMessage","fieldName":"Discord Bot Maker Error Text","message":"${tempVars(\"DBMErr\")}","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"ErrorMessage","fieldName":"Java Script Error","message":"${tempVars(\"JSErr\")}","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"ErrorMessage","fieldName":"Time Stamp ⌚","message":"Date. ${tempVars(\"Date.month\")}/${tempVars(\"Date.day\")} \nAt ${tempVars(\"Date.hour\")}:${tempVars(\"Date.min\")}:${tempVars(\"Date.sec\")}","inline":"1","name":"Add Embed Field"},{"storage":"1","varName":"ErrorMessage","channel":"5","varName2":"crashlogchan","storage3":"0","varName3":"","name":"Send Embed Message"}],"temp2":"JSErr"},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"GQCKG","actions":[]},{"name":"PointsSystem-event","temp":"message","event-type":"2","_id":"XEBZK","actions":[{"message":"1","varName":"message","info":"3","storage":"1","varName2":"message-author","name":"Store Message Info"},{"member":"2","varName":"message-author","dataName":"cash","defaultVal":"0","storage":"1","varName2":"member-cash","name":"Store Member Data"},{"FirstNumber":"${tempVars(\"member-cash\")}","info":"0","SecondNumber":"1","storage":"1","varName":"cash-receive","name":"Basic Math Operation"},{"member":"2","varName":"message-author","dataName":"cash","changeType":"0","value":"tempVars(\"cash-receive\")","name":"Control Member Data"}]},{"name":"Jackpot Reaction Added","temp":"reaction","event-type":"28","_id":"acYUa","actions":[{"reaction":"1","varName":"reaction","info":"7","storage":"1","varName2":"member","name":"Store Reaction Info"},{"reaction":"1","varName":"reaction","info":"3","storage":"1","varName2":"reaction-name","name":"Store Reaction Info"},{"member":"2","varName":"member","info":"0","varName2":"","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check If Member"},{"server":"0","varName":"","dataName":"jackpot-message","comparison":"4","value":"1","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Server Data"},{"reaction":"1","varName":"reaction","info":"0","storage":"1","varName2":"messsage-object","name":"Store Reaction Info"},{"message":"1","varName":"messsage-object","info":"1","storage":"1","varName2":"message-id","name":"Store Message Info"},{"message":"1","varName":"messsage-object","info":"4","storage":"1","varName2":"message-channel","name":"Store Message Info"},{"server":"0","varName":"","dataName":"jackpot-message","comparison":"1","value":"tempVars(\"message-id\")","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Server Data"},{"storage":"1","varName":"reaction-name","comparison":"1","value":"'💵'","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"server":"0","varName":"","dataName":"jackpot-entry","defaultVal":"0","storage":"1","varName2":"jackpot-entry","name":"Store Server Data"},{"server":"0","varName":"","dataName":"jackpot-prize","defaultVal":"0","storage":"1","varName2":"prize","name":"Store Server Data"},{"server":"0","varName":"","dataName":"jackpot-max-players","defaultVal":"0","storage":"1","varName2":"max-players","name":"Store Server Data"},{"member":"2","varName":"member","dataName":"cash","comparison":"4","value":"tempVars(\"jackpot-entry\")","iftrue":"0","iftrueVal":"","iffalse":"2","iffalseVal":"45","name":"Check Member Data"},{"member":"2","varName":"member","dataName":"cash","defaultVal":"0","storage":"1","varName2":"member-cash","name":"Store Member Data"},{"FirstNumber":"${tempVars(\"member-cash\")}","info":"1","SecondNumber":"${tempVars(\"jackpot-entry\")}","storage":"1","varName":"set-cash","name":"Basic Math Operation"},{"member":"2","varName":"member","dataName":"cash","changeType":"0","value":"tempVars(\"set-cash\")","name":"Control Member Data"},{"title":"Member Joined!","author":"Jackpot","color":"RANDOM","timestamp":"true","url":"","authorIcon":"https://image.flaticon.com/icons/png/512/536/536101.png","imageUrl":"","thumbUrl":"","storage":"1","varName":"join-embed","name":"Create Embed Message"},{"storage":"1","varName":"join-embed","message":"${tempVars(\"member\")} paid ${tempVars(\"jackpot-entry\")} cash and joined to the jackpot!","name":"Set Embed Description"},{"storage":"1","varName":"join-embed","channel":"5","varName2":"message-channel","storage3":"0","varName3":"","name":"Send Embed Message"},{"reaction":"1","varName":"reaction","info":"4","storage":"1","varName2":"reaction-count","name":"Store Reaction Info"},{"FirstNumber":"${tempVars(\"reaction-count\")}","info":"1","SecondNumber":"1","storage":"1","varName":"members-reactions","name":"Basic Math Operation"},{"storage":"1","varName":"members-reactions","comparison":"1","value":"tempVars(\"max-players\")","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"reaction":"1","varName":"reaction","info":"2","storage":"1","varName2":"reaction-list","name":"Store Reaction Info"},{"list":"7","varName":"reaction-list","getType":"2","position":"","storage":"1","varName2":"random-member","name":"Get Item from List"},{"member":"2","varName":"random-member","info":"1","storage":"1","varName2":"member-id","name":"Store Member Info"},{"info":"0","find":"${tempVars(\"member-id\")}","storage":"1","varName":"member-won","name":"Find Member"},{"member":"2","varName":"member-won","info":"0","varName2":"","iftrue":"2","iftrueVal":"22","iffalse":"0","iffalseVal":"","name":"Check If Member"},{"info":"1","find":"Premium","storage":"1","varName":"premium-role","name":"Find Role"},{"member":"2","varName":"member-won","role":"3","varName2":"premium-role","iftrue":"0","iftrueVal":"","iffalse":"3","iffalseVal":"3","name":"Check If Member has Role"},{"FirstNumber":"${tempVars(\"prize\")}","info":"2","SecondNumber":"1.0","storage":"1","varName":"prize-after-math","name":"Basic Math Operation"},{"storage":"1","varName":"Tax","changeType":"0","value":"\"0% (Premium)\"","name":"Control Variable"},{"count":"2","name":"Skip Actions"},{"FirstNumber":"${tempVars(\"prize\")}","info":"2","SecondNumber":"0.9","storage":"1","varName":"prize-after-math","name":"Basic Math Operation"},{"storage":"1","varName":"Tax","changeType":"0","value":"\"10%\"","name":"Control Variable"},{"title":"Winner!","author":"Jackpot","color":"RANDOM","timestamp":"true","url":"","authorIcon":"https://image.flaticon.com/icons/png/512/536/536101.png","imageUrl":"","thumbUrl":"","storage":"1","varName":"winner-embed","name":"Create Embed Message"},{"storage":"1","varName":"winner-embed","message":"${tempVars(\"random-member\")} won the jackpot!","name":"Set Embed Description"},{"storage":"1","varName":"winner-embed","fieldName":"Prize","message":"${tempVars(\"prize\")}","inline":"0","name":"Add Embed Field"},{"storage":"1","varName":"winner-embed","fieldName":"Tax","message":"${tempVars(\"Tax\")}","inline":"0","name":"Add Embed Field"},{"storage":"1","varName":"winner-embed","fieldName":"Total Cash","message":"${Math.floor(tempVars(\"prize-after-math\"))}","inline":"0","name":"Add Embed Field"},{"storage":"1","varName":"winner-embed","channel":"5","varName2":"message-channel","storage3":"0","varName3":"","name":"Send Embed Message"},{"member":"2","varName":"member-won","dataName":"cash","defaultVal":"0","storage":"1","varName2":"winner-cash","name":"Store Member Data"},{"FirstNumber":"${tempVars(\"winner-cash\")}","info":"0","SecondNumber":"${Math.floor(tempVars(\"prize-after-math\"))}","storage":"1","varName":"winner-set-cash","name":"Basic Math Operation"},{"member":"2","varName":"member-won","dataName":"cash","changeType":"0","value":"tempVars(\"winner-set-cash\")","name":"Control Member Data"},{"server":"0","varName":"","dataName":"jackpot-message","changeType":"0","value":"0","name":"Control Server Data"},{"name":"End Action Sequence"},{"channel":"5","varName":"member","message":"I'm sorry, You don't have enough cash to entry to the jackpot.","storage":"0","varName2":"","iffalse":"0","iffalseVal":"","name":"Send Message"},{"reaction":"1","varName":"reaction","member":"2","varName2":"member","name":"Remove Reaction"}]},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"xLUQD","actions":[]},{"name":"FindMusicServers","temp":"","event-type":"0","_id":"WkTzH","actions":[{"server":"1","varName":"server","name":"Change Server"},{"iftrue":"0","iftrueVal":"","iffalse":"3","iffalseVal":"1","name":"Check is Bot in Voice Channel"},{"storage":"1","varName":"list","addType":"0","position":"","value":"`${tempVars(\"server\").name} - (${tempVars(\"server\").id})`","name":"Add Item to List"},{"comment":"Skip","color":"#000000","name":"Comment"}]},{"name":"--------------------------------------------","temp":"","event-type":"0","_id":"uWdqf","actions":[]},{"name":"FindMusicServers","temp":"","event-type":"0","_id":"MlxhH","actions":[{"server":"1","varName":"server","name":"Change Server"},{"iftrue":"0","iftrueVal":"","iffalse":"3","iffalseVal":"1","name":"Check is Bot in Voice Channel"},{"storage":"1","varName":"list","addType":"0","position":"","value":"`${tempVars(\"server\").name} - (${tempVars(\"server\").id})`","name":"Add Item to List"},{"comment":"Skip","color":"#000000","name":"Comment"}]}]